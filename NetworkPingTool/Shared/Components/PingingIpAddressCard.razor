@using NetworkPingTool.Model;
@using NetworkPingTool.ViewModels;
@inherits MudComponentBase

@inject IDialogService DialogService

<MudCard>
    <MudCardContent>
        <MudGrid>
            <MudItem xs="10">
                <MudText Color="@(ViewModel.IsActive ? Color.Success : Color.Default)">
                    @($"{ViewModel.IpAddress} {(ViewModel.IsActive ? "(Running)" : "(Stopped)")}")
                </MudText>
            </MudItem>
            <MudItem xs="2" Class="d-flex justify-end">
                <PingHealthIcon HealthStatus="@ViewModel.HealthStatus" MinRoundTripTime="@ViewModel.MinRoundTripTime" MaxRoundTripTime="@ViewModel.MaxRoundTripTime"
                                AverageRoundTripTime="@ViewModel.AverageRoundTripTime" />
            </MudItem>
            <MudItem xs="12" Class="pt-0">
                <MudTextField Variant="Variant.Outlined" @bind-Text="ViewModel.Label" T="string" Placeholder="Address label" Class="pa-0 ma-0" />
            </MudItem>
            <MudItem xs="12" Class="d-flex justify-start ma-0 pt-0">
                <MudCheckBox @bind-Checked="ViewModel.IsDnsAddress" Dense="true" Label="Is DNS" LabelPosition="LabelPosition.Start" />
            </MudItem>
            <MudItem xs="12" Class="ma-0 pt-0">
                <LatestPings Results="@latest3Pings" />
            </MudItem>
            <MudItem xs="6" Class="d-flex flex-row justify-start">
                <MudTooltip Text="Show detailed logs">
                    <MudIconButton Icon="@Icons.Material.Filled.TextSnippet" Color="Color.Primary" OnClick="OpenLogDialog" />
                </MudTooltip>
            </MudItem>
            <MudItem xs="6" Class="d-flex flex-row justify-end">
                <MudIconButton Icon="@(ViewModel.IsActive ? Icons.Material.Filled.Stop : Icons.Material.Filled.PlayArrow)" 
                    OnClick="@ViewModel.OnPlayStopButtonClick" Color="Color.Primary" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Disabled="@ViewModel.IsActive"
                               OnClick="async () => await OnDeleteClicked.InvokeAsync()"
                               Color="Color.Error" />
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>


@code {
    private IDialogReference logDialog;

    private IEnumerable<PingResult> latest3Pings { get => ViewModel.Results.TakeLast(3); }

    [Parameter]
    public PingingIpAddressViewModel ViewModel { get; set; }

    [Parameter]
    public EventCallback OnDeleteClicked { get; set; }

    protected override void OnParametersSet()
    {
        // Force the dialog to refresh if the Results list changes
        if (logDialog != null)
        {
            var pingResultLog = (logDialog.Dialog as PingResultLog);
#pragma warning disable BL0005 // Necessary due to the way Dialog binding works
            pingResultLog.Results = ViewModel.Results;
#pragma warning restore BL0005
            pingResultLog.Refresh();
        }
    }

    private async Task OpenLogDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters
        {
            { nameof(PingResultLog.Results), ViewModel.Results }
        };
        logDialog = await DialogService.ShowAsync<PingResultLog>($"Log for {ViewModel.IpAddress}", parameters, options);
        await logDialog.Result;
        logDialog = null;
    }
}
