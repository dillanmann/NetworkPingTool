@using NetworkPingTool.Model;
@inherits MudComponentBase

@inject IDialogService DialogService

<MudCard>
    <MudCardContent>
        <MudGrid>
            <MudItem xs="10">
                <MudText Color="@(IsActive ? Color.Success : Color.Default)">
                    @($"{IpAddress} {(IsActive ? "(Running)" : "(Stopped)")}")
                </MudText>
            </MudItem>
            <MudItem xs="2" Class="d-flex justify-end">
                <PingHealthIcon HealthStatus="@HealthStatus" MinRoundTripTime="@MinRoundTripTime" MaxRoundTripTime="@MaxRoundTripTime" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField Variant="Variant.Outlined" @bind-Text="Label" T="string" Placeholder="Address label" Class="pa-0 ma-0" />
            </MudItem>
            <MudItem xs="6" Class="d-flex justify-start ma-0">
                <MudCheckBox @bind-Checked="IsDns" Dense="true" Label="Is DNS" LabelPosition="LabelPosition.Start"/>
            </MudItem>
            <MudItem xs="6" Class="d-flex justify-end ma-0">
                <MudText><b>Now:</b> @CurrentRoundTripTime ms</MudText>
            </MudItem>
            <MudItem xs="12" Class="d-flex justify-end ma-0">
                <MudText Class="ml-1"><b>Avg:</b> @AverageRoundTripTime ms</MudText>
            </MudItem>
            <MudItem xs="6" Class="d-flex flex-row justify-start">
                <MudTooltip Text="Show detailed logs">
                    <MudIconButton Icon="@Icons.Material.Filled.TextSnippet" Color="Color.Primary" OnClick="OpenLogDialog" />
                </MudTooltip>
            </MudItem>
            <MudItem xs="6" Class="d-flex flex-row justify-end">
                <MudIconButton Icon="@(IsActive ? Icons.Material.Filled.Stop : Icons.Material.Filled.PlayArrow)" OnClick="@InvokeButtonClick" Color="Color.Primary" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Disabled="@IsActive"
                               OnClick="async () => await OnDeleteClicked.InvokeAsync()"
                               Color="Color.Error" />
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>


@code {

    private bool isDns;
    private string label;

    public string IpAddressClasses { get => IsActive ? "active-address" : ""; }

    public bool IsDns
    {
        get => isDns;
        set
        {
            isDns = value;
            OnDnsChanged.InvokeAsync(value);
        }
    }

    public string Label
    {
        get => label;
        set
        {
            label = value;
            OnLabelChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public string IpAddress { get; set; }

    [Parameter]
    public bool IsActive { get; set; }

    [Parameter]
    public long MinRoundTripTime { get; set; }

    [Parameter]
    public long MaxRoundTripTime { get; set; }

    [Parameter]
    public long AverageRoundTripTime { get; set; }

    [Parameter]
    public long CurrentRoundTripTime { get; set; }

    [Parameter]
    public long TotalPings { get; set; }

    [Parameter]
    public long TotalFailures { get; set; }

    [Parameter]
    public EventCallback<bool> OnDnsChanged { get; set; }

    [Parameter]
    public EventCallback<string> OnLabelChanged { get; set; }

    [Parameter]
    public PingHealthStatus HealthStatus { get; set; }

    [Parameter]
    public EventCallback OnPlayClicked { get; set; }

    [Parameter]
    public EventCallback OnStopClicked { get; set; }

    [Parameter]
    public EventCallback OnDeleteClicked { get; set; }

    [Parameter]
    public IEnumerable<PingResult> Results { get; set; }

    private async Task InvokeButtonClick()
    {
        if (IsActive)
        {
            await OnStopClicked.InvokeAsync();
        }
        else
        {
            await OnPlayClicked.InvokeAsync();
        }
    }

    private void OpenLogDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters();
        parameters.Add("Results", Results);
        DialogService.Show<PingResultLog>($"Log {IpAddress}", parameters, options);
    }
}
