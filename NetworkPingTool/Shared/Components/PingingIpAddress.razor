@inherits MudComponentBase

<div>
    <MudGrid Class="d-flex align-center">
        <MudItem xs="6">
            <MudText>@IpAddress</MudText>
        </MudItem>
        <MudItem xs="1">
            <MudText>@MinRoundTripTime</MudText>
        </MudItem>
        <MudItem xs="1">
            <MudText>@MaxRoundTripTime</MudText>
        </MudItem>
        <MudItem xs="1">
            <MudText>@AverageRoundTripTime</MudText>
        </MudItem>
         <MudItem xs="1">
            <MudText>@TotalPings</MudText>
        </MudItem>
        <MudItem xs="1">
            <MudIconButton Icon="@(IsActive ? Icons.Material.Filled.Stop : Icons.Material.Filled.PlayArrow)" OnClick="@InvokeButtonClick" Color="Color.Primary" />
        </MudItem>
        <MudItem xs="1">
            <MudIconButton
            Icon="@Icons.Material.Filled.Delete"
            Disabled="@IsActive"
            OnClick="async () => await OnDeleteClicked.InvokeAsync()"
            Color="Color.Primary"/>
        </MudItem>
    </MudGrid>
</div>

@code {
    [Parameter]
    public string IpAddress { get; set; }

    [Parameter]
    public bool IsActive { get; set; }

    [Parameter]
    public long MinRoundTripTime { get; set; }

    [Parameter]
    public long MaxRoundTripTime { get; set; }

    [Parameter]
    public long AverageRoundTripTime { get; set; }

    [Parameter]
    public long TotalPings { get; set; }

    [Parameter]
    public EventCallback OnPlayClicked { get; set; }

    [Parameter]
    public EventCallback OnStopClicked { get; set; }

    [Parameter]
    public EventCallback OnDeleteClicked { get; set; }

    private async Task InvokeButtonClick()
    {
        if (IsActive)
        {
            await OnStopClicked.InvokeAsync();
        }
        else
        {
            await OnPlayClicked.InvokeAsync();
        }
    }
}
