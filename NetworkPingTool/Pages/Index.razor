@page "/"
@using NetworkPingTool.Shared.Components
@using NetworkPingTool.Shared.Validators;
@using NetworkPingTool.ViewModels;

@implements IDisposable
@inherits BasePage<IndexViewModel>

<PageTitle>Index</PageTitle>

<div>
    <MudTabs Outlined="false">
        <MudTabPanel Text="Ping Tool" Icon="@Icons.Material.Filled.NetworkPing">
            <MudGrid>
                <MudItem xs="12" Class="mt-2 mb-0 pb-2">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mr-2"
                               Disabled="@(!ViewModel.CanStopAllPingingAddresses)" OnClick="@ViewModel.StopPingingAllAddresses">
                        Stop all
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Error"
                               Disabled="@(!ViewModel.CanDeleteAllPingingAddresses)" OnClick="@ViewModel.DeleteAllPingingAddresses">
                        Delete all
                    </MudButton>
                </MudItem>
                @foreach (var pingingAddress in ViewModel.IpAddresses)
                {
                    <MudItem xs="12" sm="6" md="4" lg="3" xl="2" Class="my-0 py-0">
                        <PingingIpAddressCard IpAddress="@pingingAddress.IpAddress"
                                          @bind-IsDns="@pingingAddress.IsDnsAddress"
                                          @bind-Label="@pingingAddress.Label"
                                          IsActive="@pingingAddress.IsActive"
                                          MinRoundTripTime="@pingingAddress.MinRoundTripTime"
                                          MaxRoundTripTime="@pingingAddress.MaxRoundTripTime"
                                          AverageRoundTripTime="@pingingAddress.AverageRoundTripTime"
                                          CurrentRoundTripTime="@pingingAddress.CurrentRoundTripTime"
                                          HealthStatus="@pingingAddress.HealthStatus"
                                          TotalPings="@pingingAddress.TotalPings"
                                          TotalFailures="@pingingAddress.TotalFailures"
                                          OnPlayClicked="async () => await ViewModel.StartPingingAddress(pingingAddress)"
                                          OnStopClicked="async () => await ViewModel.StopPingingAddress(pingingAddress)"
                                          OnDeleteClicked="async () => await ViewModel.DeleteIpAddress(pingingAddress)"
                                          Results="@pingingAddress.Results" />
                    </MudItem>
                }

                <MudItem xs="12" sm="6" md="4" lg="3" xl="2" Class="my-0 py-0">
                    <NewIpAddress ExistingConnections="ViewModel.IpAddresses" AddNewAddressClicked="@ViewModel.AddNewIpAddress" />
                </MudItem>
            </MudGrid>
        </MudTabPanel>
        <MudTabPanel Text="Settings" Icon="@Icons.Material.Filled.Settings">
            <Settings />
        </MudTabPanel>
    </MudTabs>

</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        await ViewModel.OnInitializedAsync();
        ViewModel.NotifyStateChange += OnNotify;
    }

    void IDisposable.Dispose()
    {
        ViewModel.NotifyStateChange -= OnNotify;
    }

    public async Task OnNotify() => await InvokeAsync(StateHasChanged);
}